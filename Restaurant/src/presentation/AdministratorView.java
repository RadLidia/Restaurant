package presentation;
//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import business.BaseProduct;
import business.CompositeProduct;
import business.MenuItem;
import business.Restaurant;

public class AdministratorView {
	private JButton addBaseButton;
	private JButton addCompositeButton;
	private JButton editButton;
	private JButton deleteButton;
	private JLabel labelTitle;
	private JLabel labelMeniu;
	private JTable table;
	
	private JFrame frame;
	private DefaultTableModel model;

	public AdministratorView(Restaurant r) {

		addBaseButton = new JButton ("Add Base");
		addCompositeButton = new JButton ("Add Composite");
		editButton = new JButton ("Edit");
		deleteButton = new JButton ("Delete");
		labelTitle = new JLabel ("Administrator");
		labelMeniu = new JLabel ("Meniu:");
		
		frame = new JFrame("Administrator");
		frame.setSize(new Dimension(510, 317));

		JPanel p = new JPanel();
		p.setLayout(null);
		
		ArrayList<MenuItem> items = r.getMenu();
	    String[] columnNames = new String[] {"Name", "Composed by", "Price", "Check"};
	    Object[][] data = {{"morcovi", "itself", 11.0f, false},
	    {"rosii", "itself", 5.0f, false},
	    {"varza", "itself", 17.0f, false},
	    {"salata", "varza,rosii", 32.0f, false}
	    };
	    MenuItem m = new BaseProduct("morcovi", 11.0f);
	    r.createMenuItem(m);
	    m = new BaseProduct("rosii", 5.0f);
	    r.createMenuItem(m);
	    m = new BaseProduct("varza", 8.0f);
	    r.createMenuItem(m);
	    CompositeProduct c = new CompositeProduct("salata", 8.0f);
	    ArrayList<MenuItem> list = r.getOrdersComposedBy("varza,rosii");
		c.setComponents(list);
	    r.createMenuItem(c);
	    
	    DefaultTableModel model = new DefaultTableModel(data, columnNames);
        table = new JTable(model) {

            private static final long serialVersionUID = 1L;
            @Override
            public Class getColumnClass(int column) {
                switch (column) {
                    case 0:
                        return String.class;
                    case 1:
                        return String.class;
                    case 2:
                        return Float.class;
                    case 3:
                        return Boolean.class;
                    default:
                        return String.class;
                }
            }
        };
        model.setColumnIdentifiers(columnNames);
        table.setPreferredScrollableViewportSize(table.getPreferredSize());
		table.setBackground(Color.decode("#BDCAF9"));
        JScrollPane scrollPane = new JScrollPane(table);
        frame.getContentPane().add(scrollPane);
	
		addBaseButton.setBounds (10, 240, 120, 25);
		addCompositeButton.setBounds (135, 240, 120, 25);
		editButton.setBounds (260, 240, 120, 25);
		deleteButton.setBounds (385, 240, 100, 25);
		labelTitle.setBounds (180, 35,200, 25);
		labelMeniu.setBounds (50, 75, 100, 25);
		table.setBounds (40, 95, 415, 110);

		p.add (addBaseButton);
		p.add (addCompositeButton);
		p.add (editButton);
		p.add (deleteButton);
		p.add (labelTitle);
		p.add (labelMeniu);
		p.add (table);

		labelTitle.setFont(new Font("Cambria", Font.BOLD, 20));

		frame.setContentPane(p);	
		frame.setVisible(false);
}

	public void setFrame(){
		this.frame.setVisible(true);
	}
	
	public JButton getAddBaseButton(){
		return this.addBaseButton;
	}
	public JButton getAddCompositeButton(){
		return this.addCompositeButton;
	}
	public JButton getEditButton(){
		return this.editButton;
	}
	public JButton getDeleteButton(){
		return this.deleteButton;
	}
	
    void addListener(ActionListener listen) {
    	addBaseButton.addActionListener(listen);
    	addCompositeButton.addActionListener(listen);
    	editButton.addActionListener(listen);
    	deleteButton.addActionListener(listen);
 
	}
    
    public int getTableSize() {
    	return table.getRowCount();
    }
    
    public void checkSelected() {
    	int size = table.getRowCount();
    	boolean exist = false;
    	for(int i = 0; i < size;i++){
    		if((boolean) table.getValueAt(i,3)){
    			exist = true;
    		}
    	}
    	if(exist == false){
    		JOptionPane.showMessageDialog(null,"No row was selected. Get back to menu!");
    		return;
    	}
    }
    
    public MenuItem menuItemChecked(int i, Restaurant r) {
    	
    	if((boolean) table.getValueAt(i,3)) {
			String name = (String) table.getValueAt(i,0);
			String composedBy = (String) table.getValueAt(i,1);
			float price = (float) table.getValueAt(i,2);
			if(!composedBy.equals("itself")) {
				MenuItem m = new CompositeProduct(name, price);
				ArrayList<MenuItem> list = r.getOrdersComposedBy(composedBy);
				m.setComponents(list);
			}
			MenuItem m = new BaseProduct(name, price);
			return m;
    	}
		return null;
    }

    public void addToTable(MenuItem m) {

    	DefaultTableModel model = (DefaultTableModel) table.getModel();
    	model.addRow(new Object[]{m.getName(), "itself", m.getPrice(), false});
    }
    
    public void addCompositeToTable(MenuItem m) {

    	DefaultTableModel model = (DefaultTableModel) table.getModel();
    	model.addRow(new Object[]{m.getName(), m.getComposedBy(), m.getPrice(), false});
    }
    
    public void deleteFromTable(int i) {

    	DefaultTableModel model = (DefaultTableModel) table.getModel();
    	model.removeRow(i);
    }
    
}
